{"version":3,"sources":["Assets/hero.gif","Layout/Default.jsx","Section/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DefaultLayout","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","window","location","react_default","a","createElement","className","Container","Navbar","collapseOnSelect","expand","variant","Brand","href","Nav","Button","onClick","handlePageChange","content","Component","Home","src","hero","App","Default","Section_Home","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oRC0CzBC,cAvCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,kFAKjBQ,OAAOC,SACL,sHAGF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWD,UAAU,iBACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,QAAQ,SAC3CR,EAAAC,EAAAC,cAACG,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,iBAGAV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKR,UAAU,YAKfH,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQT,UAAU,aAAaU,QAASpB,KAAKqB,kBAA7C,aAONd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWD,UAAU,2BACnBH,EAAAC,EAAAC,cAAA,WAAMT,KAAKJ,MAAM0B,mBAhCDC,8BC6BbC,6MA5BbpB,MAAQ,2EAEN,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+GAIAF,EAAAC,EAAAC,cAAA,iIAIAF,EAAAC,EAAAC,cAAA,uFAMJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOe,IAAKC,eAtBlBH,aCcJI,mLATX,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEbH,EAAAC,EAAAC,cAACmB,EAAD,CAAeN,QAASf,EAAAC,EAAAC,cAACoB,EAAD,gBALdN,aCOEO,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd3baaab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hero.7f943f89.gif\";","import React, { Component } from \"react\";\nimport { Button, Navbar, Nav, NavDropdown, Container } from \"react-bootstrap\";\nclass DefaultLayout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  handlePageChange() {\n    window.location =\n      \"https://drive.google.com/file/d/1AaDOZIW2p-PVlhmQRvLVAx-tOVhnp-di/view?usp=sharing\";\n  }\n  render() {\n    return (\n      <div className=\"verticalCenter mainHeight\">\n        <Container className=\"mainContainer\">\n          <div className=\"navWrapper\">\n            <Navbar collapseOnSelect expand=\"sm\" variant=\"light\">\n              <Navbar.Brand href=\"#home\">favian hazman</Navbar.Brand>\n              {/* <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" /> */}\n              {/* <Navbar.Collapse id=\"responsive-navbar-nav\"> */}\n              <Nav className=\"mr-auto\">\n                {/* <Nav.Link href=\"#Me\">Me</Nav.Link>\n                  <Nav.Link href=\"#Professional\">Professional</Nav.Link>\n                  <Nav.Link href=\"#Blog\">Blog</Nav.Link> */}\n              </Nav>\n              <Nav>\n                <Button className=\"primaryBtn\" onClick={this.handlePageChange}>\n                  Resume\n                </Button>\n              </Nav>\n              {/* </Navbar.Collapse> */}\n            </Navbar>\n          </div>\n          <Container className=\" verticalCenter content\">\n            <div>{this.props.content}</div>\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default DefaultLayout;\n","import React, { Component } from \"react\";\nimport hero from \"../Assets/hero.gif\";\nclass Home extends Component {\n  state = {};\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"verticalCenter content col-md-8\">\n          <div>\n            <h2>\n              in a journey of enabling smart society through advancement in\n              technology ðŸ‡®ðŸ‡©\n            </h2>\n            <p>\n              Hello! My name is Favian Kharisma Hazman. I'm studying Information\n              Systems at University of Indonesia . Yes, i code.\n            </p>\n            <small>\n              This website is still on progress. Will finish it on my spare\n              times.\n            </small>\n          </div>\n        </div>\n        <div className=\"heroContainer col-md-4\">\n          <img className=\"hero\" src={hero} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./Style/App.css\";\nimport DefaultLayout from \"./Layout/Default\";\nimport Home from \"./Section/Home\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      \n        <DefaultLayout content={<Home />} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}